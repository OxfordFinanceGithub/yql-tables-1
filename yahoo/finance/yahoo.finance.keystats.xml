<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>
            Original: Ryan Hoium
            Updated by: James Dyer
        </author>
        <description>
            Yahoo Finance - Key Statistics by Stock Symbol
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='AAPL'
        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
            <key id="symbol" type="xs:string" paramType="variable" required="true" />
            <key id="terms" type="xs:string" paramType="variable"
                    default="true" required="false" />
            </inputs>
            <execute>
                <![CDATA[
// for (var x=10; x>0; x--)
//     y.log('' + x)
// y.log("We're going to bomb!");
// y.bender();
//%begin-include lib/common.inc

// -----------------------------------------------------------------------------
// Commonly needed functions ...

// Returns the text below the passed node as a trimmed string (YQL's trim
// method appears not to strip newlines).
function allText(node) {
    var text = [];
    for each (var x in node.descendants()) {
        if (x.nodeKind() == 'text')
            text.push(x);
    }
    return text.join(' ').replace(/^\s+|\s+$/g, '');
}

// Converts an HTML display name into a JavaScript identifier. Also
// splits out any parenthesized qualifying term, such as "ttm",
// "intraday", "mrq", or "yoy".
function makeFieldName(name) {
    name = String(name).replace(/:/g, '');
    var m = name.match(/^(.*?)\s*\((.+?)\)\s*$/);
    var term = null;
    if (m) {
        name = m[1];
        term = m[2];
    }
    name = name.replace(/\b(.)/g, function(s){
        return s.toUpperCase();
    });
    name = name.replace(/[\s-]+/g, '');
    name = name.replace(/%/g, 'Pct');
    name = name.replace(/&/g, 'And');
    name = name.replace(/([a-z])\//g, '$1To');
    name = name.replace(/\W/g, '');
    if (/^\d/.test(name))
        name = 'P_' + name;
    return {name:name, term:term};
}

// Normalizes suffixed Yahoo Finance numbers to numeric values.
// Deletes %-signs. Multiplies by scale, if provided.
function parseNumber(n, scale) {
    if (!n)
        return n;
    n = String(n);
    if (/^\s*(?:[nN]\/?[aA])|-\s*$/.test(n))
        return '';
    var m = n.match(/^\s*(?:\(\s*([0-9.,]+[bBmMkK%]?)\s*\))\s*$/);
    if (m)
        n = '-' + m[1];
    var m = n.match(/^\s*(?:([+-])\s*)?([0-9.,]+)\s*([BbMmKk%]?)\s*$/);
    if (!m)
        return n
    var value = (m[1] == '-' ? -1 : 1) * m[2].replace(/,/g, '');
    switch (m[3]) {
        case 'b':
        case 'B':
            value = +(value + 'e9');
            break;
        case 'm':
        case 'M':
            value = +(value + 'e6');
            break;
        case 'k':
        case 'K':
            value = +(value + 'e3');
            break;
        default:
            value = +value;
    }
    if (scale)
        value *= scale;
    return value;
}
// -----------------------------------------------------------------------------
//%end-include f669ba5733f2ca3487833d65cb47362dc3f40f5f

// Setup Query from finance.yahoo.com
var terms = /^[tTyY]/.test(terms);
var url="http://finance.yahoo.com/quote/" + symbol + "/key-statistics";
var xpath = "//table[@class='table-qsp-stats Mt(10px)']/tbody//tr//td";
var query = y.query("select * from html where url=@url and compat='html5' and xpath=@xpath", {url:url, xpath:xpath});
var keystatsquery = query.results;

// Process Results
var statsdata = <stats symbol={symbol}></stats>;
y.log("test");
if (keystatsquery.td.length() !== 0) {
    var i = 0;
    while (i < keystatsquery.td.length())
    {
        // Setup to Process Two 'td' Elements at a Time - Name and Value Pairs
        var td_param_name = keystatsquery.td[i];
        var td_value = keystatsquery.td[i+1];
        i += 2;

        // Process Parameter Name and any Associated Attributes (Timeframe, Stock Split Info)
        var parm = makeFieldName(td_param_name.span[0].text().toString());

        // Process Value Information
        if (td_value.hasOwnProperty('span')){
            value = td_value.span.text().toString();
        }
        else{
            value = td_value.text().toString();
        }
    
         value = parseNumber(value);
    
        // Append Value Pair to XML Structure
        if (terms && parm.term) {
            statsdata.appendChild(<{parm.name} term={parm.term}>{value}</{parm.name}>);
        }
        else {
            statsdata.appendChild(<{parm.name}>{value}</{parm.name}>);
        }
    }
}
// Return statsdata strucuture
response.object = statsdata;
            ]]>
            </execute>
        </select>
    </bindings>
</table>
